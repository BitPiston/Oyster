<document title="SQL Compatability" path="" depth="" index="6">
	<synopsis>While Oyster currently only supports MySQL, we plan to implement PgSQL support as well.  This document outlines various imcompatibilities between the two, so that code written now will require minimal changes to be made compatible later.</synopsis>
	<section title="Reserved Words">
		MySQL and PostgreSQL have different sets of reserved words.  Choose column names carefully.
	</section>
	<section title="Booleans">
		MySQL does not have a boolean type, use tinyint(1) instead.  Use '1' or '0' when inserting into the value into the database.  The quotes are important, PgSQL will interpret the STRINGS '1' and '0' as true/false but NOT the integers 1 and 0.
	</section>
	<section title="The LIMIT clause">
		PgSQL only supports LIMIT on SELECT queries.
	</section>
	<section title="INSERT syntax">
		PgSQL does not support the following syntax:
		<example>
			INSERT INTO table_name SET column1 = "value1", colum2 = "value2"
		</example>
		To comply with both MySQL and PgSQL, use this instead:
		<example>
			INSERT INTO table_name (column1, column2) VALUES ("value1", "value2")
		</example>
	</section>
	<section title="Auto Incrementing/Sequences">
		MySQL and PgSQL handle creating automatically incrementing columns differently.  Oyster's DBI wrapper provides a neutral interface to retreive the value of the last incremented column:
		<example>
			$query->insert_id(string sequence_name)
		</example>
		The sequence_name is ignored on MySQL, but will be used to correspond to the proper sequence on PgSQL.
		<note>The standard naming scheme for sequences is 'tablename_columname_seq'.</note>
	</section>
	<section title="Miscellaneous">
		<todo>Verify this</todo>
		PgSQL's DBI driver does not support the rows() method on anything but SELECT queries.
	</section>
</document>
