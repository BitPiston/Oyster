<document title="String Functions" extract_time="2008-02-19 08:14:35" source="./lib/string.pm" path="lib/" index="2.19" depth="../">
    <synopsis>
        String related stuff -- some general, some Oyster specific.
    </synopsis>
    <function name="get_first_words">
        <synopsis>
            Given a string and a number of words, returns the first X words from a string.
        </synopsis>
        <note>
            This does include punctuation, but it does not count towards the word count.
        </note>
        <note>
            If your string contains xml, be sure to use xml::strip_elements first.
        </note>
        <prototype>
            string = string::get_first_words(string, int num_words)
        </prototype>
    </function>
    <function name="proper_caps">
        <synopsis>
            Takes a string and capitalizes the first letter of each word.
        </synopsis>
        <prototype>
            string = string::proper_caps(string)
        </prototype>
        <todo>
            This should be more intelligent; aka, dont caps things like 'a', 'the', etc
        </todo>
    </function>
    <function name="pad">
        <synopsis>
            Pads a string with spaces to a given length.
        </synopsis>
        <note>
            If the string is too long, chops the beginning off and prepends with ...
        </note>
        <note>
            The optional third argument allows you to have it chop off the end of
            strings instead of the beginning if the string is too long.
        </note>
        <prototype>
            string = string::pad(string, int length[, bool chop_end])
        </prototype>
    </function>
    <function name="urlify">
        <synopsis>
             Takes a string and turns it into something url-friendly
        </synopsis>
        <prototype>
            string = string::urlify(string)
        </prototype>
    </function>
    <function name="random">
        <synopsis>
            Generate a random alphanumeric string
        </synopsis>
        <note>
            The default length is 32
        </note>
        <prototype>
            string = string::random([int length])
        </prototype>
        <example>
            print string::random(100);
        </example>
        <todo>
            Possible to do this via chr and just using a random int &lt; 62
        </todo>
    </function>
</document>
