<document title="Menu" extract_time="2008-02-28 07:29:59" source="./lib/menu.pm" path="lib/" index="2.16" depth="../" file="menu">
    <synopsis>
        The menu API provides an easy way to create complex menus and print their corresponding XML easily.
    </synopsis>
    <todo>
        Add icons?
    </todo>
    <section title="Implementation Details">
        As a side effect of allowing both OO and procedural syntaxes, this actually uses inside-out objects for menus (although items are still self-contained, since they were a hash ref anyways).
    </section>
    <function name="new">
        <synopsis>
            Allows OO-style access to the menu API.
        </synopsis>
        <prototype>
            obj = menu->new(string label[, string description])
        </prototype>
    </function>
    <function name="label">
        <synopsis>
            Sets the corresponding proper label for a menu ID.
        </synopsis>
        <note>
            If no menu ID is specified, the default menu ID is used.
        </note>
        <prototype>
            menu::label([string menu_id], string menu_label)
        </prototype>
        <prototype>
            obj->label(string menu_label)
        </prototype>
    </function>
    <function name="description">
        <synopsis>
            Sets the corresponding description for a menu ID.
        </synopsis>
        <note>
            If no menu ID is specified, the default menu ID is used.
        </note>
        <prototype>
            menu::description([string menu_id], string menu_description)
        </prototype>
        <prototype>
            obj->description(string menu_description)
        </prototype>
    </function>
    <function name="set_default_menu">
        <synopsis>
            Sets the default menu ID to be assumed if none is specified.
        </synopsis>
        <todo>
            Should this return the old default menu ID?
        </todo>
        <todo>
            This should probably either be removed or hard coded to navigation;  or at least have a warning that changing it is probably a bad idea.
        </todo>
        <prototype>
            menu::set_default_menu(string menu_id)
        </prototype>
        <prototype>
            obj->set_default_menu()
        </prototype>
    </function>
    <function name="add_item">
        <synopsis>
            Adds an item to a menu
        </synopsis>
        <note>
            To add sub-items to an existing item, specify the 'parent' argument instead of 'menu'.
        </note>
        <note>
            If no menu ID or item is specified, the default menu ID is used.
        </note>
        <note>
            If the 'require_children' argument is true, this item will ONLY be printed if it contains sub-items.
        </note>
        <note>
            'label' and 'url' are assumed to be xml-safe, if they must be entified, you must call xml::entities() on them yourself
        </note>
        <note>
            If OO syntax is used, an object is returned instead of a normal hash reference.  add_item() can be called on that object to add sub items.
        </note>
        <prototype>
            hashref item = menu::add_item([menu => string menu_id OR parent => hashref item][, require_children => bool], label => string label, url => string url)
        </prototype>
        <prototype>
            obj = obj->add_item([, require_children => bool], label => string label, url => string url)
        </prototype>
    </function>
    <function name="print_xml">
        <synopsis>
            Prints a menu's XML
        </synopsis>
        <note>
            If no menu ID is specified, the default menu ID is used.
        </note>
        <note>
            If the menu contains no items, nothing will be printed.
        </note>
        <todo>
            Possibly allow overriding this behavior.
        </todo>
        <note>
            If the menu does not have a label -- set via menu::label -- the id is printed instead (as id="" instead of label="").
        </note>
        <note>
            Once finished, this deletes all data associated with the printed menu.
        </note>
        <prototype>
            bool was_anything_printed = menu::print_xml([string menu_id])
        </prototype>
        <prototype>
            bool was_anything_printed = obj->print_xml()
        </prototype>
    </function>
</document>
