<document title="Style &amp; Templates Functions" extract_time="2008-02-19 08:11:16" source="./lib/style.pm">
    <synopsis>
        Functions related to styles and templates
    </synopsis>
    <section tile="Public API">

        <function name="include_template">
            <synopsis>
                Defines a specific xsl template to use for the current request.
            </synopsis>
            <prototype>
                style::include_template(string template_name)
            </prototype>
        </function>
        <function name="register">
            <synopsis>
                Adds an entry to the current site's styles table
            </synopsis>
            <prototype>
                style::register(string style_id, string style_name)
            </prototype>
            <note>
                This does nothing (and returns undef) if the given style ID is already registered.
            </note>
        </function>
        <function name="unregister">
            <synopsis>
                Removes a style's entry in the current site's styles table
            </synopsis>
            <note>
                This does nothing if passed a non-existant style ID.
            </note>
            <prototype>
                style::unregister(string style_id)
            </prototype>
        </function>
        <function name="enable">
            <synopsis>
                Enables a style
            </synopsis>
            <note>
                This does nothing if passed an invalid style ID.
            </note>
            <prototype>
                style::enable(string style_id)
            </prototype>
        </function>
        <function name="disable">
            <synopsis>
                Disables a style
            </synopsis>
            <note>
                This does nothing if passed an invalid style ID.
            </note>
            <prototype>
                style::disable(string style_id)
            </prototype>
        </function>
        <function name="is_enabled">
            <synopsis>
                Checks if a given style is enabled
            </synopsis>
            <prototype>
                bool = style::is_enabled(string style_id)
            </prototype>
        </function>
        <function name="is_registered">
            <synopsis>
                Checks if a given style is registered
            </synopsis>
            <prototype>
                bool = style::is_registered(string style_id)
            </prototype>
        </function>
        <function name="print_header">
            <synopsis>
                Print the page header.
            </synopsis>
            <note>
                Modules should rarely need to call this function explicitely.  Each page
                request is wrapped in the template automatically.
            </note>
            <prototype>
                style::print_header()
            </prototype>
            <todo>
                Some of $attrs is cachable and not necessary to assemble every request
            </todo>
            <todo>
                Investigate if all $attrs are even used somewhere, and if some are
                rarely used, don't always print them
            </todo>
        </function>
        <function name="print_footer">
            <synopsis>
                Print the page footer.
            </synopsis>
            <note>
                Modules should rarely need to call this function explicitely.  Each page
                request is wrapped in the template automatically.
            </note>
            <prototype>
                style::print_footer()
            </prototype>
        </function>
        <function name="print_styles_xml">
            <synopsis>
                Prints styles in an xml-friendly manner.
            </synopsis>
            <prototype>
                style::print_styles_xml()
            </prototype>
        </function>
        <function name="print_enabled_styles_xml">
            <synopsis>
                Print enabled styles in an xml-friendly manner.
            </synopsis>
            <prototype>
                style::print_enabled_styles_xml()
            </prototype>
        </function>
        <function name="is_valid_style">
            <synopsis>
                Returns true if a valid style is found.
            </synopsis>
            <prototype>
                bool = style::is_valid_style(string style_id[, string ignore_style_id])
            </prototype>
        </function>
        <function name="is_reserved_id">
            <synopsis>
                Returns true if a style id is reserved.
            </synopsis>
            <prototype>
                bool = style::is_reserved_id(string style_id)
            </prototype>
        </function>
        <function name="compile">
            <synopsis>
                Calls xslcompiler.pl on all of the current site's styles, returns the url path to the style for the given stylesheets.
            </synopsis>
            <prototype>
                string stylesheet_url, string stylesheet_path = style::compile(string style[, string stylesheet][, string stylesheet])
            </prototype>
        </function>
    </section>
    
    <section title="Private Functions">
        <function name="_get_module_stylesheets">
            <todo>
                Dcoument this function
            </todo>
        </function>
        <function name="_needs_compilation">
            <todo>
                Document this function
            </todo>
        </function>
        <function name="_load">
            <synopsis>
                Loads (or reloads) enabled styles
            </synopsis>
            <prototype>
                _load()
            </prototype>
        </function>
        <function name="_compile_style">
            <todo>
                should hooks/global includes be compiled?
            </todo>
            <todo>
                Document this function
            </todo>
        </function>
    </section>
</document>
