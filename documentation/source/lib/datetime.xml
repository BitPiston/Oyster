<document title="Date &amp; Time Functions" extract_time="2008-02-28 07:29:58" source="./lib/datetime.pm" path="lib/" index="2.6" depth="../" file="datetime">
    <synopsis>
        Functions associated with retreiving, calculating, or formatting the date
        and time.
    </synopsis>
    <todo>
        add a wrapper for Time::HiRes so that it can be made optional (just
        fallback to time() if Time::HiRes isn't available, and put 'less than one
        second' for times less than a second)
    </todo>
    <function name="is_valid_format">
        <synopsis>
            Checks if a given string is a valid date format
        </synopsis>
        <todo>
            bool = datetime::is_valid_format(string format)
        </todo>
    </function>
    <function name="print_date_formats_xml">
        <synopsis>
            Prints available date formats in an xml-friendly manner
        </synopsis>
        <prototype>
            datetime::print_date_formats_xml()
        </prototype>
    </function>
    <function name="days_in_month">
        <synopsis>
            Returns the number of days in a given month
        </synopsis>
        <note>
            Month is 1-12, NOT 0-11.
        </note>
        <prototype>
            int num_days = datetime::days_in_month(int year, int month)
        </prototype>
        <example>
            my $num_days = datetime::days_in_month(2006, 5);
        </example>
    </function>
    <function name="gmtime">
        <synopsis>
            Returns the unix epoch time in GMT
        </synopsis>
        <prototype>
            int = datetime::gmtime()
        </prototype>
        <example>
            my $gmtime = datetime::gmtime();
        </example>
    </function>
    <function name="is_valid_time_offset">
        <synopsis>
            Returns true if a given string is a valid time offset, false otherwise
        </synopsis>
        <prototype>
            bool = datetime::is_valid_time_offset(int time_offset)
        </prototype>
    </function>
    <function name="get_gmt_offset">
        <synopsis>
            Calculates the GMT offset of the server
        </synopsis>
        <prototype>
            int time_offset = datetime::get_gmt_offset()
        </prototype>
        <todo>
            Possibly allow the passing of the time to perform the check at instead
            of just using the return value of time().  This would be useful to test
            cases where days or years may be different.
        </todo>
    </function>
    <function name="from_unixtime">
        <synopsis>
            emulates mysql's FROM_UNIXTIME() function
        </synopsis>
        <note>
            This expects a unix epoch timestamp with the server's current offset
        </note>
        <prototype>
            string mysql_datetime = datetime::from_unixtime(int unix_time)
        </prototype>
    </function>
    <function name="from_unixtime_gmt">
        <synopsis>
            emulates mysql's FROM_UNIXTIME() function
        </synopsis>
        <note>
            This expects a unix epoch timestamp in gmt
        </note>
        <prototype>
            string mysql_datetime = datetime::from_unixtime_gmt(int unix_time)
        </prototype>
    </function>
</document>
