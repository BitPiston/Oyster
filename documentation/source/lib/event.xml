<document title="Event Functions" extract_time="2008-02-19 08:14:35" source="./lib/event.pm" path="lib/" index="2.8" depth="../">
    <synopsis>
        These functions allow the creation of events that modules can hook into.
    </synopsis>
    <todo>
        The execute* functions are called a lot! Could possibly gain significant speed
        if we used AUTOLOAD and generated a function to run each event dynamically
        with only the code necessary for that event.
    </todo>
    <function name="register_hook">
        <synopsis>
            Registers a sub routine to be called when a certain event is triggered
        </synopsis>
        <note>
            Priority defaults to 50.
        </note>
        <note>
            Use default priority where possible.  Only define an explicit priority
            if absolutely necessary.
        </note>
        <prototype>
            event::register_hook(string event_name, string sub_name[, int priority])
        </prototype>
        <example>
            event::register_hook('load', 'do_some_stuff', 64);
            sub do_some_stuff {
                log::status('Did some stuff...');
            }
        </example>
    </function>
    <function name="_rebuild">
        <synopsis>
            Rebuilds an event table based on priority
        </synopsis>
        <note>
            This is used internally by the Oyster library, modules should never need
            to call this function.
        </note>
    </function>
    <function name="destroy">
        <synopsis>
            Destroys a lookup table for a particular event
        </synopsis>
        <note>
            This can be used to free up some memory for events that are only
            signalled once.
        </note>
        <note>
            Once destroyed, the table cannot be restored without reloading Oyster,
            or at the very least, all code that registered any hooks.
        </note>
        <prototype>
            event::destroy(string event_name)
        </prototype>
        <example>
            event::destroy('load');
        </example>
    </function>
    <function name="execute">
        <synopsis>
            Executes all handlers associated with a particular event
        </synopsis>
        <note>
            Any extra arguments are passed to the hook functions.
        </note>
        <note>
            Returns an array containing the return values of all hook functions
            called.
        </note>
        <prototype>
            array return_values = event::execute(string event_name)
        </prototype>
        <example>
            event::execute('load');
        </example>
        <example>
            my @return_values = event::execute('load', 'some argument');
        </example>
        <todo>
            Remove the check that prevents events from executing multiple times per
            request -- it is an artificial limitation created before events were
            expanded so much, replace it with excecute_once().
        </todo>
    </function>
    <function name="execute_by_module">
        <synopsis>
            Executes handlers associated with a particular event owned by a particular
            module
        </synopsis>
        <note>
            Any extra arguments are passed to the hook functions.
        </note>
        <note>
            Returns an array containing the return values of all hook functions
            called.
        </note>
        <prototype>
            array return_values = event::execute_by_module(string event_name, string module_id)
        </prototype>
        <example>
            my @return_values = event::execute_by_module('load', 'news', 'some argument');
        </example>
        <todo>
            If the second argument is an array ref, execute the event in multiple
            modules.
        </todo>
    </function>
    <function name="execute_one">
        <warning>
            Untested
        </warning>
        <prototype>
            array return_values = event::execute_one(string event_name)
        </prototype>
        <todo>
            Documentation
        </todo>
    </function>
    <function name="module_handles_event">
        <synopsis>
            Returns true if a module has one or more handlers for a particular event
        </synopsis>
        <note>
            If event::destroy() has been called on the specified event, this will
            return false even if the module implements a handler.
        </note>
        <prototype>
            bool = event::module_handles_event(string module_name, string event_name)
        </prototype>
        <example>
            $result = event::module_handles_event('news', 'load');
        </example>
    </function>
    <function name="delete_module_hooks">
        <synopsis>
            Removes all hooks created by a particular module.
        </synopsis>
        <note>
            Users should rarely need to call this, it is used when unloading or
            reloading a module.
        </note>
        <prototype>
            event::delete_module_hooks(string module_id)
        </prototype>
    </function>
</document>
