<document title="Common Gateway Interface Functions">
    <synopsis>
        Functions associated with processing Common Gateway Interface requests
    </synopsis>
    <todo>
        clean up multipart parsing, check out cgi::lite to cover weird corner cases
    </todo>
    <todo>
        clean up this api a bit, some things are needlessly put into functions
    </todo>
    <todo>
        Private/Public sections documentation
    </todo>
    <function name="start">
        <synopsis>
           Begins a CGI request, processes POST, GET, and COOKIES 
        </synopsis>
        <note>
            Modules should never need to call this function directly, it is called automatically each request.
        </note>
        <prototype>
            cgi::start()
        </prototype>
    </function>
    <function name="end">
        <synopsis>
            Ends a CGI request, cleans up after cgi::start()
        </synopsis>
        <note>
            Modules should never need to call this function directly, it is called automatically each request.
        </note>
        <prototype>
            cgi::end()
        </prototype>
    </function>
    <function name="_process_namespaces">
        <warning>
            Unimplemented
        </warning>
        <synopsis>
            Processes namespaces from the url
        </synopsis>
        <note>
            This is a private function used internally by the Oyster library. Modules should never need to call this function.
        </note>
        <note>
            Namespaces allow you to emulate the query string using the directory path.
        </note>
        <note>
            Oyster urls should never have : in them unless you mean to use namespaces!
        </note>
        <prototype>
            _process_namespaces()
        </prototype>
    </function>
    <function name="_process_form_post">
        <synopsis>
            Processes POST data
        </synopsis>
        <note>
            This is a private function used internally by the Oyster library. Modules should never need to call this function.
        </note>
        <prototype>
            _process_form_post()
        </prototype>
        <todo>
            test multipart processing with more browsers (tested and working: FF/IE/Opera)
        </todo>
    </function>
    <function name="_process_form_get">
        <synopsis>
            Processes GET data
        </synopsis>
        <note>
            This is a private function used internally by the Oyster library. Modules should never need to call this function.
        </note>
        <prototype>
            _process_form_get()
        </prototype>
    </function>
    <function name="_process_cookies">
        <synopsis>
            Processes cookie data
        </synopsis>
        <note>
            This is a private function used internally by the Oyster library. Modules should never need to call this function.
        </note>
        <prototype>
            _process_cookies()
        </prototype>
    </function>
    <function name="set_cookie">
        <synopsis>
            Sets a cookie
        </synopsis>
        <note>
            If no expiration time is set, the cookie is usually removed when the browser window is closed.
        </note>
        <prototype>
            cgi::set_cookie(string name, string value[, int expires_minutes][, string path][, string domain])
        </prototype>
        <example>
            cgi::set_cookie('last_page_view_time', gmtime(), 60);
        </example>
    </function>
    <function name="_cookie_date">
        <synopsis>
            Returns a date formatted to be used in a cookie expiration date
        </synopsis>
        <note>
            This is a private function used internally by the Oyster library. Modules should never need to call this function.
        </note>
        <prototype>
            string date = _cookie_date(int epoch_seconds)
        </prototype>
    </function>
</document>
