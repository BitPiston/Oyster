<document title="XML Feed Functions" extract_time="2008-02-19 08:11:16" source="./lib/xml/feed.pm">
    <warning>
        This library is considered pre-alpha.
    </warning>
    <synopsis>
        Provides an object to parse and read from rss/atom feeds.
    </synopsis>
    <note>
        This is not meant to be a perfect, deep, feed parser.  It is meant to
        quickly scan feeds and retreive basic information from them, not necessarily
        every little detail in the feed's xml.
    </note>
    <note>
        This is implemented as a subclass to xml::parser.  If you are interested
        in learning how to subclass xml::parser to parse specific types of
        documents, check this module's source out.
    </note>
    <todo>
        Documentation
    </todo>
    <section title="Object Properties">
        <ul>
            <li><code>arrayref items</code></li>
            <li><code>string feed_type</code></li>
            <li><code>string title</code></li>
        </ul>
    </section>

    <function name="new">
        <synopsis>
            Creates a new xml::feed object.
        </synopsis>
        <note>
            'until_url_hash' is used by imfeedr.  If anything, imfeedr should
            subclass this instead of having its hacks hard coded in.
        </note>
        <note>
            If 'num_items' is specified, the parser will stop parsing after the
            specified number of items.
        </note>
        <prototype>
            $feed = xml::feed->new(['num_items' => int max_num_of_items][, 'until_url_hash' => string title_hash])
        </prototype>
    </function>
    <function name="parse_url">
        <synopsis>
            
        </synopsis>
        <note>
            
        </note>
        <prototype>
            
        </prototype>
        <example>
            
        </example>
    </function>
    <function name="_node_start_handler">
        <synopsis>
            Catches root node and analyzes it to detect the feed type and implement
            the proper handlers.
        </synopsis>
        <note>
            
        </note>
        <prototype>
            
        </prototype>
        <example>
            
        </example>
    </function>
    <section title="RDF/RSS Handlers">
    
        <function name="_rss_node_start_handler">
            <synopsis>
                
            </synopsis>
            <note>
                
            </note>
            <prototype>
                
            </prototype>
            <example>
                
            </example>
        </function>
        <function name="_rss_node_end_handler">
            <synopsis>
                
            </synopsis>
            <note>
                
            </note>
            <prototype>
                
            </prototype>
            <example>
                
            </example>
        </function>
    </section>
    
    <section title="Atom Handlers">
    
        <function name="_atom_node_start_handler">
            <synopsis>
                
            </synopsis>
            <note>
                
            </note>
            <prototype>
                
            </prototype>
            <example>
                
            </example>
        </function>
        <function name="_atom_node_end_handler">
            <synopsis>
                
            </synopsis>
            <note>
                
            </note>
            <prototype>
                
            </prototype>
            <example>
                
            </example>
        </function>
    </section>
</document>
