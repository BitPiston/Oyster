<document title="Output Buffering Functions" extract_time="2008-02-19 08:14:35" source="./lib/buffer.pm" path="lib/" index="2.1" depth="../">
    <synopsis>
        These functions that allow capturing output.  These were inspired by
        php's ob_* series of functions.
    </synopsis>
    <todo>
        Rename to ob_?  There is more than one kind of buffer.
    </todo>
    <note>
        This only captures output that is print'ed without a specific
        filehandle.  For example
        <example>print STDOUT "Hello World";</example>
        would bypass any output buffer, but
        <example>print "Hello World";</example>
        would not.
    </note>
    <function name="start">
        <synopsis>
            Begins an output buffer
        </synopsis>
        <prototype>
            buffer::start()
        </prototype>
    </function>
    <function name="end">
        <synopsis>
            Ends the current output buffer and prints the contents of the buffer
        </synopsis>
        <note>
            Does nothing if no buffers are active
        </note>
        <warning>
            If you call buffer::end() while another buffer is active, the result is printed to that buffer; to circumvent this behavior use print STDOUT buffer::end_clean();
        </warning>
        <prototype>
            buffer::end()
        </prototype>
    </function>
    <function name="end_all">
        <synopsis>
            Ends all output buffers and prints their contents
        </synopsis>
        <note>
            Does nothing if no buffers are active
        </note>
        <prototype>
            buffer::end_all()
        </prototype>
    </function>
    <function name="end_clean">
        <synopsis>
            Ends the current output buffer and returns the contents of the buffer
        </synopsis>
        <note>
            Does nothing if no buffers are active
        </note>
        <prototype>
            string buffer_contents = buffer::end_clean()
        </prototype>
        <example>
            $output = buffer::end_clean();
        </example>
    </function>
    <function name="end_all_clean">
        <synopsis>
            Ends all output buffers and returns their contents
        </synopsis>
        <note>
            Does nothing if no buffers are active
        </note>
        <prototype>
            string buffer_contents = buffer::end_all_clean()
        </prototype>
        <example>
            $output = buffer::end_all_clean();
        </example>
    </function>
</document>
