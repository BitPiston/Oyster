<document title="User Module" extract_time="2008-02-19 08:11:17" source="./modules/user.pm">
    <synopsis>
        This module encapsulates the current user's data/permissions and all user-related actions.
    </synopsis>
    <section title="Initialization">

        <function name="hook_load">
            <synopsis>
                Loads user group data and prepares queries to be used later.
            </synopsis>
            <note>
                This uses event::register_hook() to execute at the right times.
            </note>
        </function>
        <function name="import">
            <synopsis>
                Called by other modules to export %USER and %PERMISSIONS
            </synopsis>
        </function>
    </section>

    <section title="Actions">

        <function name="recover">
            <synopsis>
                Recovers a lost account by sending an email to a user that allows them to reset their password.
            </synopsis>
            <note>
                This is registered to the url 'user/recover'.
            </note>
        </function>
        <function name="edit_settings">
            <synopsis>
                Edits a user's settings
            </synopsis>
            <note>
                This is registered to the url 'user/settings'.
            </note>
        </function>
        <function name="confirm_email">
            <synopsis>
                Confirms an email address update
            </synopsis>
            <note>
                This is registered to the url 'user/confirm_email'.
            </note>
        </function>
        <function name="confirm_account">
            <synopsis>
                Confirms a newly registered account
            </synopsis>
            <note>
                This is registered to the url 'user/confirm'.
            </note>
            <todo>
                Automatic login
            </todo>
        </function>
        <function name="register">
            <synopsis>
                Registers a new account
            </synopsis>
            <note>
                This is registered to the url 'register'.
            </note>
        </function>
        <function name="admin">
            <synopsis>
                The administration menu
            </synopsis>
            <note>
                This is registered to the url 'admin/user'.
            </note>
        </function>
        <function name="admin_config">
            <synopsis>
                Manages the user module's configuration
            </synopsis>
            <note>
                This is registered to the url 'admin/user/config'.
            </note>
        </function>
        <function name="admin_delete_group">
            <synopsis>
                Deletes a user group
            </synopsis>
            <note>
                This is registered to the url 'admin/user/groups/delete'.
            </note>
        </function>
        <function name="admin_edit_group">
            <synopsis>
                Modifies a user group
            </synopsis>
            <note>
                This is registered to the url 'admin/user/groups/edit'.
            </note>
        </function>
        <function name="admin_create_group">
            <synopsis>
                Creates a user group
            </synopsis>
            <note>
                This is registered to the url 'admin/user/groups/create'.
            </note>
        </function>
        <function name="admin_groups">
            <synopsis>
                The manage user groups menu
            </synopsis>
            <note>
                This is registered to the url 'admin/user/groups'.
            </note>
        </function>
        <function name="admin_manage">
            <synopsis>
                Manage individual users
            </synopsis>
            <note>
                This is registered to the url 'admin/user/manage'.
            </note>
        </function>
        <function name="login">
            <synopsis>
                Logs a user into the web site
            </synopsis>
            <note>
                This is registered to the url 'login'.
            </note>
        </function>
        <function name="logout">
            <synopsis>
                Logs a user out of the web site
            </synopsis>
            <note>
                This is registered to the url 'logout'.
            </note>
        </function>
    </section>

    <section title="Event Hooks">
    </section>

    <section title="Helper Functions">
    </section>

    <section title="Public API">

        <function name="require_permission">
            <synopsis>
                Throws a 'permission_error' exception if a user does not meet a certain permission requirement
            </synopsis>
            <note>
                'minimum_level' defaults to 1.
            </note>
            <prototype>
                user::require_permission(string permission_id[, int minimum_level])
            </prototype>
        </function>
        <function name="add_permission">
            <synopsis>
                Adds a permission to the current site's user groups table
            </synopsis>
            <note>
                'default_permission_level' defaults to 0.
            </note>
            <prototype>
                user::add_permission(string permission_id[, int default_permission_level])
            </prototype>
        </function>
        <function name="delete_permission">
            <synopsis>
                Deletes a permission from the current site's user groups table
            </synopsis>
            <prototype>
                user::delete_permission(string permission_id)
            </prototype>
        </function>
        <function name="get_email">
            <synopsis>
                Retreives a user's email address based on their ID.
            </synopsis>
            <note>
                user_id defaults to the current user ID (if any), and if fetching the current user's email, adds it to the %USER hash.
            </note>
            <prototype>
                string = user::get_email([int user_id])
            </prototype>
        </function>
        <function name="get_name">
            <synopsis>
                Retreives a user's name based on their ID.
            </synopsis>
            <prototype>
                string = user::get_name(int user_id)
            </prototype>
        </function>
        <function name="find">
            <synopsis>
                Returns an entry from the user table by id, email, or username
            </synopsis>
            <prototype>
                hashref = user::find(int user_id or string username or string email)
            </prototype>
        </function>
        <function name="is_username_taken">
            <synopsis>
                Checks if a given username is taken
            </synopsis>
            <prototype>
                bool = user::is_username_taken(string username)
            </prototype>
        </function>
        <function name="get_module_permissions">
            <synopsis>
                Fetches permissions information about a module
            </synopsis>
            <note>
                Returns undef if no permission information is available
            </note>
            <note>
                throws a 'perl_error' exception if permissions.pl exists but an error occured while reading it
            </note>
            <prototype>
                hashref = user::get_module_permissions(string module_id)
            </prototype>
        </function>
    </section>
</document>
