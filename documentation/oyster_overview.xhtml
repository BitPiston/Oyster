<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8"/>
<meta http-equiv="content-style-type" content="text/css"/>
<link rel="stylesheet" type="text/css" media="screen" href="document.css"/>
<title>Oyster Overview | Oyster Documentation</title>
<!--[if lt IE 8]>
					<link rel="stylesheet" type="text/css" media="screen" href="./layout/ie.css" />
					<script src="http://ie7-js.googlecode.com/svn/version/2.0(beta3)/IE8.js" type="text/javascript"></script>
				<![endif]-->
</head>
<body class="documentation">
<div id="header">
<div class="wrapper">
<a id="title" href="http://oyster.bitpiston.com/">Oyster</a>
<span id="subtitle">A Perl web application framework.</span>
</div>
</div>
<hr/>
<div id="navigation">
<div class="wrapper">
<ul>
<li>
<a href="http://oyster.bitpiston.com/">Overview</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/download/">Download</a>
</li>
<li class="selected">
<a href="../index.xhtml">Documentation</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/weblog/">Weblog</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/development/">Development</a>
</li>
</ul>
</div>
</div>
<hr/>
<div id="content">
<div class="wrapper">
<div id="content-primary"><h1>Oyster Overview</h1>
	<p>
		This document gives a brief outline of what Oyster is and is not, how it is
		designed, and why.
	</p>
	<h2>What is Oyster?</h2><p>
		
			Oyster is a web application framework, it provides a foundation to build
			rich, dynamic web applications upon.
		
		
			Oyster is not a content-management-system.  It does not come with all of
			the functionality out-of-the-box to run a web site.  However, unlike
			most frameworks Oyster does include pre-made modules to handle common
			tasks such as user management/permissions and a unified administration
			interface.
		
	</p>
	<h2>Goals</h2><p>
		
			Performance/Scalability
			Flexibility
			Extensibility
			Ease of Development
			
		
		
			Oyster was created because members of the Oyster team felt that none of
			the existing perl web frameworks met all of the above criteria,
			particularly in performance and scalability.
		
		
			While ease-of-development (for both core developers and module authors),
			is a high priority for us, performance is our top goal.  Performance is
			a very low priority for most frameworks, and our goal is to make one
			capable of scaling to even the largest web sites.
		
		
			By flexibility we mean that there should be nothing that the framework
			prevents you from doing.  The architecture is very simple, making
			understanding how even the most core things work relatively easy; and
			the simple architecture makes it easy to change those core behaviors if
			you need to.
		
		
			Flexibility also encompasses 'TIMTOWTDI' (there is more than one way to do
			it).  By providing multiple ways to do common tasks we can make
			development easy for quick &amp; dirty scripts as well as provide ways to
			achieve high performance when it is needed.
		
		
			Flexibility is also a very important part of our template system.  Oyster
			was designed from the ground up to be able to serve any type of web site.
		
		
			Oyster's simple architecture combined with the module system and toolchain
			make it very easy to extend Oyster -- and to distribute and update your
			extensions.
		
		
			Although Oyster's top priority is performance, ease-of-development is also
			very important to us.  Oyster provides a huge API of 'convenience'
			functions to accomplish complex tasks involving integration, templating,
			and database interaction easily.
		
	</p>
	<h2>Design &amp; Architecture</h2><p>
		
			CPAN is an amazing resource for Perl modules and a shining example to
			other languages.  However, a web framework encompasses a wide range of
			functionality;  the Oyster team decided to write custom libraries for
			common tasks instead of using CPAN alternatives.  Doing this allows us to
			gain consistency: all of the Oyster libraries follow the same coding
			style, aim for the same goals as Oyster itself, can be well integrated
			with Oyster, and don't include extra bloat.  We do realize when certain
			tasks are simply too complex for us to dedicate enough time to create a
			good library for them, and we do use CPAN modules in those cases.
		
		
			Oyster's design and architecture is very simple.  Unlike many frameworks,
			we decided to avoid a complex class/object heirarchy and take a simpler
			namespace approach.  This is faster, requires less memory, and makes
			understanding the framework as a whole simpler.  However, we do use
			object-orientation where it makes sense.
		
	</p>
</div>
<div id="content-secondary">
<form id="search" method="get" action="/search/">
<div>
<input type="text" id="search-input" name="search-input" accesskey="f" value="Search documentation" onfocus="if(this.value=='Search documentation') this.value='';" onblur="if(this.value=='') this.value='Search documentation';" size="25"/>
<input type="image" src="../images/icon.search.png" id="search-submit " alt="Search" title="Search"/>
</div>
</form>
<h2>Lorem Ipsum</h2>
<p>Mauris eleifend adipiscing nisl. Mauris tellus nunc, condimentum vel, sollicitudin sit amet, gravida et, ante.</p>
</div>
</div>
</div>
<hr/>
<div id="footer">
<div class="wrapper">
<p class="copyright">Copyright © 2007–2008 BitPiston, <abbr title="Limited Liability Company">LLC</abbr>. All rights reserved. <br/> Oyster is released under the <a href="./license.xhtml">Artistic License 2</a>, or the <a href="./license.xhtml">GNU General Public License (GPL) 2</a>.</p>
<a id="bitpiston" href="http://www.bitpiston.com/">A BitPiston Product.</a>
</div>
</div>
</body>
</html>
