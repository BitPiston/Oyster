<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8"/>
    <meta http-equiv="content-style-type" content="text/css"/>
    <link rel="stylesheet" type="text/css" media="screen" href="../../document.css"/>
    <title>Oyster Request Functions | Oyster Documentation</title>
    <!--[if lt IE 8]>
					<link rel="stylesheet" type="text/css" media="screen" href="./layout/ie.css" />
					<script src="http://ie7-js.googlecode.com/svn/version/2.0(beta3)/IE8.js" type="text/javascript"></script>
				<![endif]-->
  </head>
  <body class="documentation">
    <div id="header">
      <div class="wrapper">
        <a id="title" href="http://oyster.bitpiston.com/">Oyster</a>
        <span id="subtitle">A Perl web application framework.</span>
      </div>
    </div>
    <hr/>
    <div id="navigation">
      <div class="wrapper">
        <ul>
          <li>
            <a href="http://oyster.bitpiston.com/">Overview</a>
          </li>
          <li>
            <a href="http://oyster.bitpiston.com/download/">Download</a>
          </li>
          <li class="selected">
            <a href="../index.xhtml">Documentation</a>
          </li>
          <li>
            <a href="http://oyster.bitpiston.com/weblog/">Weblog</a>
          </li>
          <li>
            <a href="http://oyster.bitpiston.com/development/">Development</a>
          </li>
        </ul>
      </div>
    </div>
    <hr/>
    <div id="content">
      <div class="wrapper">
        <div id="content-primary"><h1><span>1.19.1</span><a href="./">Oyster Request Functions</a></h1>
    <p>
        Extensions to DBI functionality (mostly driver neutral access to insert_ids
        and prepared statements)
    </p>
        <div class="function"><h2 id="pre"><span/><a href="pre" rel="bookmark">pre</a></h2><p>
                Called before each page request
            </p><p class="note">
                This is primarily used to perform updates necessary to keep daemons in sync before the next page should be served.
            </p><h3>Prototype:</h3><pre class="prototype">
                oyster::request::pre()
            </pre></div>
        <div class="function"><h2 id="handler"><span/><a href="handler" rel="bookmark">handler</a></h2><p>
                Called to handle each page request
            </p><p class="note">
                
                    The output buffer used here is a necessary evil (the header
                    must know which .xsl file to include, but that is not known
                    until the action is executed). However, it is a
                    vulnerability.  Perl cannot free memory back to the operating
                    system once it has claimed it, so if the buffer becomes
                    excessively large, the process will hog memory even after the
                    buffer is cleared.
                
                
                    This is possible to work around by wrapping your action in the
                    following code:
                    
                        # style::include() all necessary styles before doing this...
                        buffer::end();
                        print::header();
                        # code here that may potentially print lots of xml
                        buffer::start();
                    
                
                
                    However, this will NOT help if the request requires SSXSLT.
                    There is currently no way to work around this.
                
            </p><h3>Prototype:</h3><pre class="prototype">
                oyster::request::handler()
            </pre></div>
        <div class="function"><h2 id="request_cleanup"><span/><a href="request_cleanup" rel="bookmark">request_cleanup</a></h2><p>
                Performed after request_handler, after the connection is closed
            </p><p class="note">
                Hooking into request_cleanup is favorable to request_finish (unless you have a good reason), since request_finish hooks should not print anything anyways.
            </p><h3>Prototype:</h3><pre class="prototype">
                oyster::request_cleanup()
            </pre></div>
        <div class="function"><h2 id="_load_exception_handlers"><span/><a href="_load_exception_handlers" rel="bookmark">_load_exception_handlers</a></h2><p>
                Prepares the exception handlers necessary to serve a page request.
            </p><h3>Prototype:</h3><pre class="prototype">
                _load_exception_handlers()
            </pre></div>
</div>
        <div id="content-secondary">
          <form id="search" method="get" action="/search/">
            <div>
              <input type="text" id="search-input" name="search-input" accesskey="f" value="Search documentation" onfocus="if(this.value=='Search documentation') this.value='';" onblur="if(this.value=='') this.value='Search documentation';" size="25"/>
              <input type="image" src="../images/icon.search.png" id="search-submit " alt="Search" title="Search"/>
            </div>
          </form>
          <h2>Lorem Ipsum</h2>
          <p>Mauris eleifend adipiscing nisl. Mauris tellus nunc, condimentum vel, sollicitudin sit amet, gravida et, ante.</p>
        </div>
      </div>
    </div>
    <hr/>
    <div id="footer">
      <div class="wrapper">
        <p class="copyright">Copyright © 2007–2008 BitPiston, <abbr title="Limited Liability Company">LLC</abbr>. All rights reserved. <br/> Oyster is released under the <a href="./license.xhtml">Artistic License 2</a>, or the <a href="./license.xhtml">GNU General Public License (GPL) 2</a>.</p>
        <a id="bitpiston" href="http://www.bitpiston.com/">A BitPiston Product.</a>
      </div>
    </div>
  </body>
</html>
