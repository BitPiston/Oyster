<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8"/>
<meta http-equiv="content-style-type" content="text/css"/>
<link rel="stylesheet" type="text/css" media="screen" href="../document.css"/>
<title>File Functions | Oyster Documentation</title>
<!--[if lt IE 8]>
					<link rel="stylesheet" type="text/css" media="screen" href="./layout/ie.css" />
					<script src="http://ie7-js.googlecode.com/svn/version/2.0(beta3)/IE8.js" type="text/javascript"></script>
				<![endif]-->
</head>
<body class="documentation">
<div id="header">
<div class="wrapper">
<a id="title" href="http://oyster.bitpiston.com/">Oyster</a>
<span id="subtitle">A Perl web application framework.</span>
</div>
</div>
<hr/>
<div id="navigation">
<div class="wrapper">
<ul>
<li>
<a href="http://oyster.bitpiston.com/">Overview</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/download/">Download</a>
</li>
<li class="selected">
<a href="../index.xhtml">Documentation</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/weblog/">Weblog</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/development/">Development</a>
</li>
</ul>
</div>
</div>
<hr/>
<div id="content">
<div class="wrapper">
<div id="content-primary"><h1><span>2.10</span><a href="./">File Functions</a></h1><div class="todo"><strong>Todo</strong><ul><li>
        Size and mtime should throw exceptions if the file does not exist.
    </li></ul></div>
    <p>
        Functions associated with file manipulation.  This is a lightweight
        implementation of several File::* CPAN modules.
    </p>
    
    <div class="function"><h2 id="tmp_name"><span/><a href="tmp_name" rel="bookmark">tmp_name</a></h2><p>
            Generates a name for a temporary file, returns the path to that file
        </p><h3>Prototype:</h3><pre class="prototype">
            string file_path = file::tmp_name()
        </pre></div>
    <div class="function"><h2 id="tmp_web_name"><span/><a href="tmp_web_name" rel="bookmark">tmp_web_name</a></h2><p>
            Generates a name for a temporary file in a web accessible directory,
            returns both the path and url to that file
        </p><p class="note">
            A single argument is optional, if specified, it will be used as the file
            extension.
        </p><h3>Prototype:</h3><pre class="prototype">
            string file_path, string file_url = file::tmp_web_name([string extension])
        </pre></div>
    <div class="function"><h2 id="rename"><span/><a href="rename" rel="bookmark">rename</a></h2><p>
            Move or rename a file
        </p><p class="note">
            throws a 'perl_error' exception on failure
        </p><h3>Prototype:</h3><pre class="prototype">
            file::rename(string from_filename, string to_filename)
        </pre><h3>Example:</h3><pre class="code">
            file::rename("foo.txt", "bar.txt");
        </pre></div>
    
    <div class="function"><h2 id="move"><span/><a href="move" rel="bookmark">move</a></h2><p/><p class="note">
            file::move is an alias for file::rename
        </p></div>
    <div class="function"><h2 id="copy"><span/><a href="copy" rel="bookmark">copy</a></h2><p>
            Copy a file or a directory
        </p><p class="note">
            throws a 'perl_error' exception on failure
        </p><h3>Prototype:</h3><pre class="prototype">
            file::copy(string from_filename, string to_filename)
        </pre><h3>Example:</h3><pre class="code">
            file::copy("foo.txt", "bar.txt");
        </pre></div>
    <div class="function"><h2 id="size"><span/><a href="size" rel="bookmark">size</a></h2><p>
            Returns a file's size, in kilobytes
        </p><h3>Prototype:</h3><pre class="prototype">
            int fsize = file::size(string filename)
        </pre></div>
    <div class="function"><h2 id="slurp"><span/><a href="slurp" rel="bookmark">slurp</a></h2><p>
            Quick and dirty file reading
        </p><p class="note">
            Throws a perl_error exception on failure
        </p><h3>Prototype:</h3><pre class="prototype">
            string file_contents = file::slurp(string filename)
        </pre><h3>Example:</h3><pre class="code">
            
        </pre></div>
    
    <div class="function"><h2 id="read"><span/><a href="read" rel="bookmark">read</a></h2><p/><p class="note">
            file::read is an alias for file::slurp
        </p></div>
    <div class="function"><h2 id="write"><span/><a href="write" rel="bookmark">write</a></h2><p>
            Quick and dirty file writing
        </p><p class="note">
            The third optional argument, if true, will attempt to create any directories necessary to create to the file.
        </p><p class="note">
            Throws a perl_error exception on failure
        </p><h3>Prototype:</h3><pre class="prototype">
            file::write(string filename, string file_contents[, bool autocreate_directories])
        </pre></div>
    <div class="function"><h2 id="rmdir"><span/><a href="rmdir" rel="bookmark">rmdir</a></h2><p>
            Recursively deletes a directory and everything inside it.
        </p><p class="note">
            Throws a perl_error exception on failure
        </p><h3>Prototype:</h3><pre class="prototype">
            file::rmdir(string path)
        </pre></div>
    <div class="function"><h2 id="mkdir"><span/><a href="mkdir" rel="bookmark">mkdir</a></h2><p>
            Recursively creates a directory and all directories leading up to it (if necessary)
        </p><h3>Prototype:</h3><pre class="prototype">
            file::mkdir(string path)
        </pre></div>
    <div class="function"><h2 id="mtime"><span/><a href="mtime" rel="bookmark">mtime</a></h2><p>
            Returns a file's last-modified time
        </p><p class="note">
            
        </p><h3>Prototype:</h3><pre class="prototype">
            
        </pre><h3>Example:</h3><pre class="code">
            
        </pre></div>
</div>
<div id="content-secondary">
<form id="search" method="get" action="/search/">
<div>
<input type="text" id="search-input" name="search-input" accesskey="f" value="Search documentation" onfocus="if(this.value=='Search documentation') this.value='';" onblur="if(this.value=='') this.value='Search documentation';" size="25"/>
<input type="image" src="../images/icon.search.png" id="search-submit " alt="Search" title="Search"/>
</div>
</form>
<h2>Lorem Ipsum</h2>
<p>Mauris eleifend adipiscing nisl. Mauris tellus nunc, condimentum vel, sollicitudin sit amet, gravida et, ante.</p>
</div>
</div>
</div>
<hr/>
<div id="footer">
<div class="wrapper">
<p class="copyright">Copyright © 2007–2008 BitPiston, <abbr title="Limited Liability Company">LLC</abbr>. All rights reserved. <br/> Oyster is released under the <a href="./license.xhtml">Artistic License 2</a>, or the <a href="./license.xhtml">GNU General Public License (GPL) 2</a>.</p>
<a id="bitpiston" href="http://www.bitpiston.com/">A BitPiston Product.</a>
</div>
</div>
</body>
</html>
