<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8"/>
<meta http-equiv="content-style-type" content="text/css"/>
<link rel="stylesheet" type="text/css" media="screen" href="document.css"/>
<title>Oyster Documentation</title>
<!--[if lt IE 8]>
					<link rel="stylesheet" type="text/css" media="screen" href="./layout/ie.css" />
					<script src="http://ie7-js.googlecode.com/svn/version/2.0(beta3)/IE8.js" type="text/javascript"></script>
				<![endif]-->
</head>
<body class="documentation">
<div id="header">
<div class="wrapper">
<a id="title" href="http://oyster.bitpiston.com/">Oyster</a>
<span id="subtitle">A Perl web application framework.</span>
</div>
</div>
<hr/>
<div id="navigation">
<div class="wrapper">
<ul>
<li>
<a href="http://oyster.bitpiston.com/">Overview</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/download/">Download</a>
</li>
<li class="selected">
<a href="../index.xhtml">Documentation</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/weblog/">Weblog</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/development/">Development</a>
</li>
</ul>
</div>
</div>
<hr/>
<div id="content">
<div class="wrapper">
<div id="content-primary"><h1>Module Management Functions</h1>
    <p>
        Functions associated with module management
    </p>
    <div class="function"><h2>print_start_xml</h2><p>
            A convenience function to print "\t&lt;module_id&gt;\n"
        </p><p class="note">
            If the optional 'module_id' argument is not defined, the calling package will be assumed.
        </p><p class="note">
            If the optional 'action_id' argument is not defined, the calling sub routine will be assumed.
        </p><p class="note">
            If only one optional argument is present, it is assumed to be the module name
        </p><h3>print_start_xml</h3><h3>Prototype:</h3><pre class="prototype">
            module::print_start_xml([string module_id][, string action_id]);
        </pre></div>
    <div class="function"><h2>print_end_xml</h2><p>
            A convenience function to print "\t&lt;/module_id&gt;\n"
        </p><p class="note">
            This uses the module name of the last call to module::print_start_xml()
        </p><h3>print_end_xml</h3><h3>Prototype:</h3><pre class="prototype">
            module::print_end_xml();
        </pre></div>
    <div class="function"><h2>get_available</h2><p>
            Retreives a list of all available modules.
        </p><h3>get_available</h3><h3>Prototype:</h3><pre class="prototype">
            array = module::get_available()
        </pre></div>
    <div class="function"><h2>get_enabled</h2><p>
            Retreives a list of enabled modules
        </p><h3>get_enabled</h3><h3>Prototype:</h3><pre class="prototype">
            array = module::get_enabled()
        </pre></div>
    <div class="function"><h2>order_by_dependencies</h2><p>
            Given a list of modules, orders them based on their dependencies
        </p><p class="note">
            This is susceptible to infinte looping if modules have circular dependencies
        </p><h3>order_by_dependencies</h3><h3>Prototype:</h3><pre class="prototype">
            array = module::order_by_dependencies(array)
        </pre></div>
    <div class="function"><h2>get_latest_revision</h2><p>
            Retreives the latest revision available for a module
        </p><p class="note">
            returns 0 if no revisions.pl file is available
        </p><p class="note">
            throws a 'perl_error' exception on failure
        </p><h3>get_latest_revision</h3><h3>Prototype:</h3><pre class="prototype">
            int = module::get_latest_revision(string module_id)
        </pre></div>
    <div class="function"><h2>enable</h2><p>
            Enables a module
        </p><p class="note">
            This does not load the module
        </p><p class="note">
            This does nothing if passed a non-existant module ID.
        </p><h3>enable</h3><h3>Prototype:</h3><pre class="prototype">
            module::enable(string module_id)
        </pre></div>
    <div class="function"><h2>disable</h2><p>
            Disables a module
        </p><p class="note">
            This does not unload the module if it is currently loaded.
        </p><p class="note">
            This does nothing if passed a non-existant module ID.
        </p><h3>disable</h3><h3>Prototype:</h3><pre class="prototype">
            module::disable(string module_id)
        </pre></div>
    <div class="function"><h2>is_enabled</h2><p>
            Checks if a given module is enabled
        </p><h3>is_enabled</h3><h3>Prototype:</h3><pre class="prototype">
            bool = module::is_enabled(string module_id)
        </pre></div>
    <div class="function"><h2>is_registered</h2><p>
            Checks if a given module is registered
        </p><h3>is_registered</h3><h3>Prototype:</h3><pre class="prototype">
            bool = module::is_registered(string module_id)
        </pre></div>
    <div class="function"><h2>register</h2><p>
            Adds an entry to the modules table
        </p><p class="note">
            This does nothing and returns undef if the given module ID is already registered.
        </p><h3>register</h3><h3>Prototype:</h3><pre class="prototype">
            module::register(string module_id[, revision])
        </pre></div>
    <div class="function"><h2>unregister</h2><p>
            Removes a module's entry in the modules table
        </p><p class="note">
            This does nothing if passed a non-existant module ID.
        </p><h3>unregister</h3><h3>Prototype:</h3><pre class="prototype">
            module::unregister(string module_id)
        </pre></div>
    <div class="function"><h2>set_revision</h2><p>
            Sets a module's current revision
        </p><p class="note">
            Does nothing if the module is not registered
        </p><h3>set_revision</h3><h3>Prototype:</h3><pre class="prototype">
            module::set_revision(string module_id, int revision)
        </pre></div>
    <div class="function"><h2>get_revision</h2><p>
            Gets a module's revision number
        </p><p class="note">
            Returns 0 if a module is not registered
        </p><h3>get_revision</h3><h3>Prototype:</h3><pre class="prototype">
            int revision = module::get_revision(string module_name)
        </pre></div>
    <div class="function"><h2>get_meta</h2><p>
            Fetches meta information about a module
        </p><p class="note">
            throws a 'perl_error' exception on failure
        </p><h3>get_meta</h3><h3>Prototype:</h3><pre class="prototype">
            hashref = module::get_meta(string module_name)
        </pre></div>
    <div class="function"><h2>load</h2><p>
            Loads a module
        </p><p class="note">
            If the module is already loaded, it is unloaded first.
        </p><p class="note">
            dies on failure
        </p><h3>load</h3><h3>Prototype:</h3><pre class="prototype">
            module::load(string module_id);
        </pre></div>
    <div class="function"><h2>load_config</h2><p/></div>
    <div class="function"><h2>unload</h2><p>
            Unloads a module
        </p><p class="note">
            This is not gauranteed to work -- and when it does, it may break other things.
        </p><h3>unload</h3><h3>Prototype:</h3><pre class="prototype">
            module::unload(string module_id);
        </pre></div>
    <div class="function"><h2>print_modules_xml</h2><p>
            Print modules in an xml-friendly manner.
        </p><h3>print_modules_xml</h3><h3>Prototype:</h3><pre class="prototype">
            print_module_xml()
        </pre></div>
</div>
<div id="content-secondary">
<form id="search" method="get" action="/search/">
<div>
<input type="text" id="search-input" name="search-input" accesskey="f" value="Search documentation" onfocus="if(this.value=='Search documentation') this.value='';" onblur="if(this.value=='') this.value='Search documentation';" size="25"/>
<input type="image" src="../images/icon.search.png" id="search-submit " alt="Search" title="Search"/>
</div>
</form>
<h2>Lorem Ipsum</h2>
<p>Mauris eleifend adipiscing nisl. Mauris tellus nunc, condimentum vel, sollicitudin sit amet, gravida et, ante.</p>
</div>
</div>
</div>
<hr/>
<div id="footer">
<div class="wrapper">
<p class="copyright">Copyright © 2007–2008 BitPiston, <abbr title="Limited Liability Company">LLC</abbr>. All rights reserved. <br/> Oyster is released under the <a href="./license.xhtml">Artistic License 2</a>, or the <a href="./license.xhtml">GNU General Public License (GPL) 2</a>.</p>
<a id="bitpiston" href="http://www.bitpiston.com/">A BitPiston Product.</a>
</div>
</div>
</body>
</html>
