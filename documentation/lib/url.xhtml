<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8"/>
<meta http-equiv="content-style-type" content="text/css"/>
<link rel="stylesheet" type="text/css" media="screen" href="../document.css"/>
<title>URL Functions | Oyster Documentation</title>
<!--[if lt IE 8]>
					<link rel="stylesheet" type="text/css" media="screen" href="./layout/ie.css" />
					<script src="http://ie7-js.googlecode.com/svn/version/2.0(beta3)/IE8.js" type="text/javascript"></script>
				<![endif]-->
</head>
<body class="documentation">
<div id="header">
<div class="wrapper">
<a id="title" href="http://oyster.bitpiston.com/">Oyster</a>
<span id="subtitle">A Perl web application framework.</span>
</div>
</div>
<hr/>
<div id="navigation">
<div class="wrapper">
<ul>
<li>
<a href="http://oyster.bitpiston.com/">Overview</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/download/">Download</a>
</li>
<li class="selected">
<a href="../index.xhtml">Documentation</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/weblog/">Weblog</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/development/">Development</a>
</li>
</ul>
</div>
</div>
<hr/>
<div id="content">
<div class="wrapper">
<div id="content-primary"><h1><span>2.23</span><a href="./">URL Functions</a></h1>
    <p>
        Functions dealing with Oyster's url handling as well as external url
        utilities.
    </p>
    <h2 id=""><span/><a href="">General URL Functions</a></h2>

        <div class="function"><h3 id="is_valid"><span/><a href="is_valid" rel="bookmark">is_valid</a></h3><p>
                Returns true if a given string is a valid url.
            </p><h4>Prototype:</h4><pre class="prototype">
                bool = url::is_valid(string url)
            </pre></div>
    

    <h2 id=""><span/><a href="">Oyster URL Registration/Dispatching Functions</a></h2>
    
        <div class="function"><h3 id="unique"><span/><a href="unique" rel="bookmark">unique</a></h3><p>
                Finds a unique url
            </p><p class="note">
                If the url passed to url::unique is taken, unique_url will generate an
                alternative.
            </p><h4>Prototype:</h4><pre class="prototype">
                url::unique(string url)
            </pre></div>
        <div class="function"><h3 id="register"><span/><a href="register" rel="bookmark">register</a></h3><p>
                Associates a URL with an action in the database
            </p><p class="note">
                This function performs no error checking to make sure your arguments
                are valid.
            </p><p class="note">
                The optional 'params' argument is polymorphic and will properly save
                your parameters based on what type of variable you pass.
            </p><p class="note">
                The optional 'parent_id' argument allows you to skip a query if you
                already know the parent id of the URL.
            </p><p class="note">
                The second return value is necessary because the URL you requested may
                not have been available and may have been changed.
            </p><h4>Prototype:</h4><pre class="prototype">
                int url_id, string url = url::register(
                   'url'            =&gt; string url,
                   'module'         =&gt; string module_id,
                   'function'       =&gt; string function_name,
                   'title'          =&gt; string url_title,
                   ['show_nav_link' =&gt; bool show_nav_link,]
                   ['nav_priority'  =&gt; int navigation_priority,]
                   ['params'        =&gt; arrayref parameters or hashref parameters or string parameter,]
                   ['parent_id'     =&gt; int parent_id,]
                   ['regex'         =&gt; bool is_regex,]
                )
            </pre></div>
        <div class="function"><h3 id="update"><span/><a href="update" rel="bookmark">update</a></h3><p>
                Updates a registered URL
            </p><p class="note">
                This function performs no error checking to make sure your arguments
                are valid.
            </p><p class="note">
                The optional 'params' argument is polymorphic and will properly save
                your parameters based on what type of variable you pass.
            </p><p class="note">
                The second return value is necessary because the URL you requested may
                not have been available and may have been changed.
            </p><p class="note">
                If you change the URL you should NOT change anything but the last part.
                This may be changed later, but it would require significant remapping of
                many URLs.
            </p><h4>Prototype:</h4><pre class="prototype">
                int url_id, string url = url::update(
                   'url' or 'id'    =&gt; string url_to_update or int url_id_to_update,
                   ['url'           =&gt; string new_url,]
                   ['module'        =&gt; string new_module_id,]
                   ['function'      =&gt; string new_function_name,]
                   ['title'         =&gt; string new_url_title,]
                   ['show_nav_link' =&gt; bool new_show_nav_link,]
                   ['nav_priority'  =&gt; int new_navigation_priority,]
                   ['params'        =&gt; arrayref parameters or hashref parameters or string parameter]
                )
            </pre></div>
        <div class="function"><h3 id="_parse_params_arg"><span/><a href="_parse_params_arg" rel="bookmark">_parse_params_arg</a></h3><p>
                This is what allows the optional 'params' argument on register and update
                to be polymorphic.
            </p><h4>Prototype:</h4><pre class="prototype">
                hashref = _parse_params_arg(hashref or arrayref or string params)
            </pre></div>
        <div class="function"><h3 id="unregister "><span/><a href="unregister " rel="bookmark">unregister </a></h3><p>
                Deletes a URL
            </p><p class="note">
                This doesn't care if the url has any children!
            </p><h4>Prototype:</h4><pre class="prototype">
                bool = url::unregister(string url)
            </pre></div>
        <div class="function"><h3 id="unregister_by_id"><span/><a href="unregister_by_id" rel="bookmark">unregister_by_id</a></h3><p>
                Deletes a URL, by id
            </p><p class="note">
                This doesn't care if the url has any children!
            </p><h4>Prototype:</h4><pre class="prototype">
                bool = url::unregister_by_id(int url_id)
            </pre></div>
        <div class="function"><h3 id="is_registered"><span/><a href="is_registered" rel="bookmark">is_registered</a></h3><p>
                Checks if a URL is registered
            </p><h4>Prototype:</h4><pre class="prototype">
                bool is_taken = url::is_registered(string url)
            </pre></div>
        <div class="function"><h3 id="is_registered_by_id"><span/><a href="is_registered_by_id" rel="bookmark">is_registered_by_id</a></h3><p>
                Checks if a URL is taken, by id
            </p><h4>Prototype:</h4><pre class="prototype">
                bool is_taken = url::is_registered_by_id(int url_id)
            </pre></div>
        <div class="function"><h3 id="get"><span/><a href="get" rel="bookmark">get</a></h3><p>
                Retreives data associated with a url from the database
            </p><p class="note">
                Returns undef if no urls matched
            </p><h4>Prototype:</h4><pre class="prototype">
                hashref url_data = url::get(string url)
            </pre></div>
        <div class="function"><h3 id="get_by_id"><span/><a href="get_by_id" rel="bookmark">get_by_id</a></h3><p>
                Retreives all data associated with a URL from the database, by id
            </p><p class="note">
                Returns undef if no urls matched
            </p><h4>Prototype:</h4><pre class="prototype">
                hashref url_data = url::get_by_id(int url_id)
            </pre></div>
        <div class="function"><h3 id="get_url_by_id"><span/><a href="get_url_by_id" rel="bookmark">get_url_by_id</a></h3><p>
                Retreives only the URL from the database, by id
            </p><p class="note">
                Returns undef if no urls matched
            </p><h4>Prototype:</h4><pre class="prototype">
                string url = url::get_url_by_id(int url_id)
            </pre></div>
        <div class="function"><h3 id="get_parent"><span/><a href="get_parent" rel="bookmark">get_parent</a></h3><p/></div>
        <div class="function"><h3 id="get_parent_by_id"><span/><a href="get_parent_by_id" rel="bookmark">get_parent_by_id</a></h3><p>
                Incomplete
            </p></div>
        <div class="function"><h3 id="has_children"><span/><a href="has_children" rel="bookmark">has_children</a></h3><p>
                Checks if a url has any children
            </p><h4>Prototype:</h4><pre class="prototype">
                bool = url::has_children(string url)
            </pre></div>
        <div class="function"><h3 id="has_children_by_id"><span/><a href="has_children_by_id" rel="bookmark">has_children_by_id</a></h3><p>
                Checks if a url has any children, by id
            </p><h4>Prototype:</h4><pre class="prototype">
                bool = url::has_children_by_id(int url_id)
            </pre></div>
        <div class="function"><h3 id="print_subpage_xml"><span/><a href="print_subpage_xml" rel="bookmark">print_subpage_xml</a></h3><p>
                Prints subpage xml for a given url id.
            </p><h4>Prototype:</h4><pre class="prototype">
                url::print_subpage_xml(int url_id)
            </pre></div>
    

    <h2 id=""><span/><a href="">Navigation Functions</a></h2>
        <p>
            Functions related to the navigation menu, modules should rarely need
            to call these.  Oyster does it automatically.
        </p>

    
</div>
<div id="content-secondary">
<form id="search" method="get" action="/search/">
<div>
<input type="text" id="search-input" name="search-input" accesskey="f" value="Search documentation" onfocus="if(this.value=='Search documentation') this.value='';" onblur="if(this.value=='') this.value='Search documentation';" size="25"/>
<input type="image" src="../images/icon.search.png" id="search-submit " alt="Search" title="Search"/>
</div>
</form>
<h2>Lorem Ipsum</h2>
<p>Mauris eleifend adipiscing nisl. Mauris tellus nunc, condimentum vel, sollicitudin sit amet, gravida et, ante.</p>
</div>
</div>
</div>
<hr/>
<div id="footer">
<div class="wrapper">
<p class="copyright">Copyright © 2007–2008 BitPiston, <abbr title="Limited Liability Company">LLC</abbr>. All rights reserved. <br/> Oyster is released under the <a href="./license.xhtml">Artistic License 2</a>, or the <a href="./license.xhtml">GNU General Public License (GPL) 2</a>.</p>
<a id="bitpiston" href="http://www.bitpiston.com/">A BitPiston Product.</a>
</div>
</div>
</body>
</html>
