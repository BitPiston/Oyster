<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8"/>
<meta http-equiv="content-style-type" content="text/css"/>
<link rel="stylesheet" type="text/css" media="screen" href="document.css"/>
<title>Oyster Documentation</title>
<!--[if lt IE 8]>
					<link rel="stylesheet" type="text/css" media="screen" href="./layout/ie.css" />
					<script src="http://ie7-js.googlecode.com/svn/version/2.0(beta3)/IE8.js" type="text/javascript"></script>
				<![endif]-->
</head>
<body class="documentation">
<div id="header">
<div class="wrapper">
<a id="title" href="http://oyster.bitpiston.com/">Oyster</a>
<span id="subtitle">A Perl web application framework.</span>
</div>
</div>
<hr/>
<div id="navigation">
<div class="wrapper">
<ul>
<li>
<a href="http://oyster.bitpiston.com/">Overview</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/download/">Download</a>
</li>
<li class="selected">
<a href="../index.xhtml">Documentation</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/weblog/">Weblog</a>
</li>
<li>
<a href="http://oyster.bitpiston.com/development/">Development</a>
</li>
</ul>
</div>
</div>
<hr/>
<div id="content">
<div class="wrapper">
<div id="content-primary"><h1>Oyster</h1>
    <p>
        This is a lightweight web application framework, focusing on: speed, flexibility, scalability, and ease of development.  For more information, visit the official Oyster website.
    </p>
    <h2>Global Variables</h2><p>
        <p>
            These are exported to modules.
        </p>
        
            %REQUEST
            Data associated with the current request (such as the style, templates, module, action, etc).  This is a good place to store data that you want to persist for only the current request; but be careful to avoid conflicts.
            %INPUT
            GET/POST data for the current request
            %COOKIES
            Cookie data for the current request
            $DB
            The database object
            %CONFIG
            The Oyster configuration, a combination of config.pl, information from the database, and some values added when Oyster is loaded
        
    </p>
    <h2>Internals</h2><p>
        <p>
            These are functions used to run oyster, rarely called by external code (except for launchers).
        </p>
        <div class="function"><h3>import</h3><p>
                Exports Oyster variables
            </p><p class="note">
                Can optionally be passed an argument to be imported into a specific package instead of the caller.
            </p><p class="note">
                Import sets: module, launcher, test, daemon (some are NYI or dont export anything)
            </p><h4>import</h4><h3>Prototype:</h3><pre class="prototype">
                oyster::import(string package_name[, string import_set])
            </pre><pre class="prototype">
                use oyster [string import_set]
            </pre><pre class="prototype">
                oyster-&gt;import([string import_set])
            </pre></div>
        <div class="function"><h3>load</h3><p>
                Load Oyster and prepares the oyster environment
            </p><p class="note">
                The optional arguments can be used to tell Oyster to only load certain things.  This can be useful for certain scripts that only need a minimal Oyster environment.
            </p><p class="note">
                All optional arguments default to true.
            </p><p class="note">
                'load_config' determines whether additional configuration data should be loaded from the database.
            </p><p class="note">
                'load_libs' does not determine whether libraries are imported or not, but whether their load event routines are called.
            </p><p class="note">
                'load_request' determines whether Oyster should be prepared to serve page requests.
            </p><p class="note">
                'load_modules' determines whether modules will be loaded.
            </p><h4>load</h4><h3>Prototype:</h3><pre class="prototype">
                oyster::load(hashref configuration[, db_connect =&gt; bool][, load_config =&gt; bool][, load_modules =&gt; bool][, load_libs =&gt; bool][, load_request =&gt; bool])
            </pre></div>
        <div class="function"><h3>_db_connect</h3><p>
                Establishes a database connection if one isn't already active
            </p><h4>_db_connect</h4><h3>Prototype:</h3><pre class="prototype">
                _db_connect([bool force_reconnect])
            </pre></div>
        <div class="function"><h3>_load_config</h3><p>
                Loads (or reloads) oyster configuration
            </p><h4>_load_config</h4><h3>Prototype:</h3><pre class="prototype">
                _load_config()
            </pre></div>
        <div class="function"><h3>_load_modules</h3><p>
                Loads (or reloads) oyster modules
            </p><h4>_load_modules</h4><h3>Prototype:</h3><pre class="prototype">
                _load_modules()
            </pre></div>
    </p>
    
    <h2>Request Handling</h2><p>
        <p>
            These functions deal with handling page requests.  Like the above internal functions, should rarely be called by outside code (except for launchers).
        </p>
        <div class="function"><h3>request_pre</h3><p>
                Called before each page request
            </p><p class="note">
                This is primarily used to perform updates necessary to keep daemons in sync before the next page should be served.
            </p><h4>request_pre</h4><h3>Prototype:</h3><pre class="prototype">
                oyster::request_pre()
            </pre></div>
        <div class="function"><h3>request_handler</h3><p>
                Called to handle each page request
            </p><p class="note">
                
                    The output buffer used here is a necessary evil (the header
                    must know which .xsl file to include, but that is not known
                    until the action is executed). However, it is a
                    vulnerability.  Perl cannot free memory back to the operating
                    system once it has claimed it, so if the buffer becomes
                    excessively large, the process will hog memory even after the
                    buffer is cleared.
                
                
                    This is possible to work around by wrapping your action in the
                    following code:
                    
                        # style::include() all necessary styles before doing this...
                        buffer::end();
                        print::header();
                        # code here that may potentially print lots of xml
                        buffer::start();
                    
                
                
                    However, this will NOT help if the request requires SSXSLT.
                    There is currently no way to work around this.
                
            </p><h4>request_handler</h4><h3>Prototype:</h3><pre class="prototype">
                oyster::request_handler()
            </pre></div>
        <div class="function"><h3>request_cleanup</h3><p>
                Performed after request_handler, after the connection is closed
            </p><p class="note">
                Hooking into request_cleanup is favorable to request_finish (unless you have a good reason), since request_finish hooks should not print anything anyways.
            </p><h4>request_cleanup</h4><h3>Prototype:</h3><pre class="prototype">
                oyster::request_cleanup()
            </pre></div>
        <div class="function"><h3>_load_exception_handlers</h3><p>
                Prepares the exception handlers necessary to serve a page request.
            </p><h4>_load_exception_handlers</h4><h3>Prototype:</h3><pre class="prototype">
                _load_exception_handlers()
            </pre></div>
    </p>

    <h2>Public API</h2><p>
        <p>
            The oyster API is a set of functions available to all oyster code and oyster modules.
        </p>
        <div class="function"><h3>execute_script</h3><p>
                Executes a script in the shared_path/script/ directory, under the current site ID.
            </p><p class="note">
                The first argument is the filename without the .pl extension.
            </p><h4>execute_script</h4><h3>Prototype:</h3><pre class="prototype">
                string output = oyster::execute_script(string script_name[, array args])
            </pre><h4>execute_script</h4><h3>Example:</h3><pre class="code">
                print execute_script('xslcompiler');
            </pre></div>
        <div class="function"><h3>restart</h3><p>
                Restarts the current script.
            </p><h4>restart</h4><h3>Prototype:</h3><pre class="prototype">
                oyster::restart()
            </pre></div>
        <div class="function"><h3>perl_require</h3><p>
                Performs a 'require' without Oyster's library search paths.
            </p><p class="note">
                This cannot be used like 'require IO::Socket', you must use 'IO/Socket.pm' instead.
            </p><h4>perl_require</h4><h3>Prototype:</h3><pre class="prototype">
                oyster::perl_require(string filename)
            </pre></div>
        <div class="function"><h3>shell_escape</h3><p>
                Escapes characters to avoid injection when executing shell commands.
            </p><p class="note">
                Currently only escapes double quotes.  The data passed to this function
                assumes that it will be placed inside double quotes when it is passed to
                the shell.
            </p><h4>shell_escape</h4><h3>Prototype:</h3><pre class="prototype">
                string escaped_string = oyster::shell_escape(string)
            </pre></div>
        <div class="function"><h3>dump</h3><p>
                Uses Data::Dumper to return a dump of a variable.
            </p><p class="note">
                This is simply here for convenience.
            </p><p class="note">
                It is probably not a good idea to use this in production code, as it loads Data::Dumper once it is called, which requires a significant amount of memory.
            </p><p class="note">
                Like Data::Dumper::Dumper, be sure to pass a ref.
            </p><h4>dump</h4><h3>Prototype:</h3><pre class="prototype">
                variable = oyster::dump(ref)
            </pre></div>
    </p>

    <h2>Exported Functions</h2><p>
        <p>
            Similar in purpose to the Oyster API, but these are automatically exported to modules.
        </p>
        <div class="function"><h3>confirm</h3><p>
                Prompts a user for confirmation.  If confirmation has not been gotten,
                calls abort().  If confirmation has been gotten, does nothing.
            </p><p class="note">
                This uses the &lt;confirm&gt; xml node, styled in shared/styles/source.xsl
            </p><h4>confirm</h4><h3>Prototype:</h3><pre class="prototype">
                confirm(string message)
            </pre><h4>confirm</h4><h3>Example:</h3><pre class="code">
                confirm("Are you sure you want to delete everything on your hard drive?");
                `rm -f /*.*`;
            </pre></div>
    <div class="function"><h3>confirmation</h3><p>
            Prints a confirmation message.
        </p><h4>confirmation</h4><h3>Prototype:</h3><pre class="prototype">
            confirmation(string confirmation_message[, forward_options])
        </pre><h4>confirmation</h4><h3>Example:</h3><pre class="code">
            confirmation('Something happened.', $BASE_URL =&gt; 'Return to the home page.');
        </pre></div>
    </p>
</div>
<div id="content-secondary">
<form id="search" method="get" action="/search/">
<div>
<input type="text" id="search-input" name="search-input" accesskey="f" value="Search documentation" onfocus="if(this.value=='Search documentation') this.value='';" onblur="if(this.value=='') this.value='Search documentation';" size="25"/>
<input type="image" src="../images/icon.search.png" id="search-submit " alt="Search" title="Search"/>
</div>
</form>
<h2>Lorem Ipsum</h2>
<p>Mauris eleifend adipiscing nisl. Mauris tellus nunc, condimentum vel, sollicitudin sit amet, gravida et, ante.</p>
</div>
</div>
</div>
<hr/>
<div id="footer">
<div class="wrapper">
<p class="copyright">Copyright © 2007–2008 BitPiston, <abbr title="Limited Liability Company">LLC</abbr>. All rights reserved. <br/> Oyster is released under the <a href="./license.xhtml">Artistic License 2</a>, or the <a href="./license.xhtml">GNU General Public License (GPL) 2</a>.</p>
<a id="bitpiston" href="http://www.bitpiston.com/">A BitPiston Product.</a>
</div>
</div>
</body>
</html>
