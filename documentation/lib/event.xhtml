<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8"/>
    <meta http-equiv="content-style-type" content="text/css"/>
    <link rel="stylesheet" type="text/css" media="screen" href="../document.css"/>
    <title>Event Functions | Oyster Documentation</title>
    <!--[if lt IE 8]>
					<link rel="stylesheet" type="text/css" media="screen" href="./layout/ie.css" />
					<script src="http://ie7-js.googlecode.com/svn/version/2.0(beta3)/IE8.js" type="text/javascript"></script>
				<![endif]-->
  </head>
  <body class="documentation">
    <div id="header">
      <div class="wrapper">
        <a id="title" href="http://oyster.bitpiston.com/">Oyster</a>
        <span id="subtitle">A Perl web application framework.</span>
      </div>
    </div>
    <hr/>
    <div id="navigation">
      <div class="wrapper">
        <ul>
          <li>
            <a href="http://oyster.bitpiston.com/">Overview</a>
          </li>
          <li>
            <a href="http://oyster.bitpiston.com/download/">Download</a>
          </li>
          <li class="selected">
            <a href="../index.xhtml">Documentation</a>
          </li>
          <li>
            <a href="http://oyster.bitpiston.com/weblog/">Weblog</a>
          </li>
          <li>
            <a href="http://oyster.bitpiston.com/development/">Development</a>
          </li>
        </ul>
      </div>
    </div>
    <hr/>
    <div id="content">
      <div class="wrapper">
        <div id="content-primary"><h1><span>1.8</span><a href="./">Event Functions</a></h1><div class="todo"><strong>Todo</strong><ul><li>
        The execute* functions are called a lot! Could possibly gain significant speed
        if we used AUTOLOAD and generated a function to run each event dynamically
        with only the code necessary for that event.
    </li></ul></div>
    <p>
        These functions allow the creation of events that modules can hook into.
    </p>
    
    <div class="function"><h2 id="register_hook"><span/><a href="register_hook" rel="bookmark">register_hook</a></h2><p>
            Registers a sub routine to be called when a certain event is triggered
        </p><p class="note">
            Priority defaults to 50.
        </p><p class="note">
            Use default priority where possible.  Only define an explicit priority
            if absolutely necessary.
        </p><h3>Prototype:</h3><pre class="prototype">
            event::register_hook(string event_name, string sub_name[, int priority])
        </pre><h3>Example:</h3><pre class="code">
            event::register_hook('load', 'do_some_stuff', 64);
            sub do_some_stuff {
                log::status('Did some stuff...');
            }
        </pre></div>
    <div class="function"><h2 id="_rebuild"><span/><a href="_rebuild" rel="bookmark">_rebuild</a></h2><p>
            Rebuilds an event table based on priority
        </p><p class="note">
            This is used internally by the Oyster library, modules should never need
            to call this function.
        </p></div>
    <div class="function"><h2 id="destroy"><span/><a href="destroy" rel="bookmark">destroy</a></h2><p>
            Destroys a lookup table for a particular event
        </p><p class="note">
            This can be used to free up some memory for events that are only
            signalled once.
        </p><p class="note">
            Once destroyed, the table cannot be restored without reloading Oyster,
            or at the very least, all code that registered any hooks.
        </p><h3>Prototype:</h3><pre class="prototype">
            event::destroy(string event_name)
        </pre><h3>Example:</h3><pre class="code">
            event::destroy('load');
        </pre></div>
    <div class="function"><h2 id="execute"><span/><a href="execute" rel="bookmark">execute</a></h2><p>
            Executes all handlers associated with a particular event
        </p><p class="note">
            Any extra arguments are passed to the hook functions.
        </p><p class="note">
            Returns an array containing the return values of all hook functions
            called.
        </p><h3>Prototype:</h3><pre class="prototype">
            array return_values = event::execute(string event_name)
        </pre><h3>Example:</h3><pre class="code">
            event::execute('load');
        </pre><pre class="code">
            my @return_values = event::execute('load', 'some argument');
        </pre></div>
    <div class="function"><h2 id="execute_by_module"><span/><a href="execute_by_module" rel="bookmark">execute_by_module</a></h2><p>
            Executes handlers associated with a particular event owned by a particular
            module
        </p><p class="note">
            Any extra arguments are passed to the hook functions.
        </p><p class="note">
            Returns an array containing the return values of all hook functions
            called.
        </p><h3>Prototype:</h3><pre class="prototype">
            array return_values = event::execute_by_module(string event_name, string module_id)
        </pre><h3>Example:</h3><pre class="code">
            my @return_values = event::execute_by_module('load', 'news', 'some argument');
        </pre></div>
    <div class="function"><h2 id="execute_one"><span/><a href="execute_one" rel="bookmark">execute_one</a></h2><p/><h3>Prototype:</h3><pre class="prototype">
            array return_values = event::execute_one(string event_name)
        </pre></div>
    <div class="function"><h2 id="module_handles_event"><span/><a href="module_handles_event" rel="bookmark">module_handles_event</a></h2><p>
            Returns true if a module has one or more handlers for a particular event
        </p><p class="note">
            If event::destroy() has been called on the specified event, this will
            return false even if the module implements a handler.
        </p><h3>Prototype:</h3><pre class="prototype">
            bool = event::module_handles_event(string module_name, string event_name)
        </pre><h3>Example:</h3><pre class="code">
            $result = event::module_handles_event('news', 'load');
        </pre></div>
    <div class="function"><h2 id="delete_module_hooks"><span/><a href="delete_module_hooks" rel="bookmark">delete_module_hooks</a></h2><p>
            Removes all hooks created by a particular module.
        </p><p class="note">
            Users should rarely need to call this, it is used when unloading or
            reloading a module.
        </p><h3>Prototype:</h3><pre class="prototype">
            event::delete_module_hooks(string module_id)
        </pre></div>
</div>
        <div id="content-secondary">
          <form id="search" method="get" action="/search/">
            <div>
              <input type="text" id="search-input" name="search-input" accesskey="f" value="Search documentation" onfocus="if(this.value=='Search documentation') this.value='';" onblur="if(this.value=='') this.value='Search documentation';" size="25"/>
              <input type="image" src="../images/icon.search.png" id="search-submit " alt="Search" title="Search"/>
            </div>
          </form>
          <h2>Lorem Ipsum</h2>
          <p>Mauris eleifend adipiscing nisl. Mauris tellus nunc, condimentum vel, sollicitudin sit amet, gravida et, ante.</p>
        </div>
      </div>
    </div>
    <hr/>
    <div id="footer">
      <div class="wrapper">
        <p class="copyright">Copyright © 2007–2008 BitPiston, <abbr title="Limited Liability Company">LLC</abbr>. All rights reserved. <br/> Oyster is released under the <a href="./license.xhtml">Artistic License 2</a>, or the <a href="./license.xhtml">GNU General Public License (GPL) 2</a>.</p>
        <a id="bitpiston" href="http://www.bitpiston.com/">A BitPiston Product.</a>
      </div>
    </div>
  </body>
</html>
