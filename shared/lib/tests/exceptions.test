[
    {
        'name'        => 'Basic Exceptions',
        'description' => 'Testing basic exception handling.',
        'output'      => '1',
        'source'      => <<'END_SOURCE'
#!CONFIG_PREAMBLE

            # use oyster libraries
            use exceptions;

            try {
                print "1";
            };
END_SOURCE
    },
    {
        'name'        => 'Exception Catching',
        'description' => 'Testing exception catching.',
        'output'      => '1',
        'source'      => <<'END_SOURCE'
#!CONFIG_PREAMBLE

            # use oyster libraries
            use exceptions;

            try {
                throw 'foo' => '1';
            }
            catch 'foo', with {
                print $_[0];
            };
END_SOURCE
    },
    {
        'name'        => 'Advanced Exceptions',
        'description' => 'Testing all features of exceptions and throws all kinds of weird cases in.',
        'output'      => '1ac',
        'source'      => <<'END_SOURCE'
#!CONFIG_PREAMBLE

            # use oyster libraries
            use exceptions;

            try {
                throw 'meow' => 'wtf'; # test aborting a single block
            }
            catch 'meow', with {
                my $foo = shift;
                abort()
            };

            # put a try block that does nothing first, to ensure that the stack is properly cleared after it is executed
            try {
                try {
                    throw 'foo' => '1'; # test aborting an outer block from an inner one (print "2" is never reached)
                };
                print '2';
            }
            catch 'foo', with {
                print shift;
                abort();
            };

            try {
                try {
                    throw 'bar' => 'a'; # test aborting an inner block from an outer block's catch
                };
                print 'c';
            }
            catch 'bar', with {
                print shift;
                abort(1);
            }
END_SOURCE
    },
]