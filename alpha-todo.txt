
\ = canned
* = done
+ = moved or likely moved to beta (or maybe canned altogether)
& = in progress

ANKLE

* update svn on the server (current one is pretty ancient I think)
* create a new repo for oyster; leave it empty, i'll populate it (svn://bitpiston.com/oyster)
* create an oyster sub domain, just a static one for now

CANNED

\ add some way for modules and libraries to mark themselves as automatically imported to modules
\ menu lib doesnt xml::entities anything... it probably should | entity it yourself before sending if necessary.
\ possibly add a new menu item attribute that allows to insert arbitrary xml -- big maybe on this.
\ Benchmark prepare_cached versus how queries are cached now, because the current method is confusing and ugly
\ possibly add a warn() to all libraries if they are loaded outside of an oyster environment
	\ possible create an import() for every lib to allow forcing it to load outside of an oyster env (if necessary)

DELAYED

+ Remove http.pm's reliance on IO::Socket -- it pulls in too much shit; just use Socket;
+ Possibly divide /scripts/ directory up to split up different categories of scripts
+ change exceptions to be OO
+ many existing scripts could simply be moved to the console, possibly create scripts/console_cmds/ so that more commands can easily be added
+ ajax.pm
+ create a script to clean tmp directories
+ remove email templates from the core db and just make them arguments passed to email_template; let modules store their own email templates
+ browser sniffing: instead of checking for firefox version or safari version check for gecko version or webkit version
+ cgi.pm should accept array/hash values (carefully...)
+ preprocessor, new config option to optimize for memory or cpu/db access
+ possibly allow oo-style access to the menu lib, this would require minimal changes (check for an odd number of arguments, if first is a ref, then its a parent, otherwise it's a menu)

COMPLETED

* Refactor config.pl to remove all of that ugly perl code that isn't just config data (create config.heavy.pl to do that stuff)
* Refactor oyster.pm and move url stuff to url.pm
* Clean up xml.pm and document more methods
	* remove attr_entities, just have entities() entify quotes by default
	* do something about proper english entities, probably remove it and make it an optional argument to entities()
	* add entities_safe() that will not double-entify strings (for if you have a string that you aren't sure if it already contains entified stuff)
* Clean up server.pl
* Clean up console.pl
* Comment/document various other utilities
* Clean up user module
* make %USER and %PERMISSIONS imports
* make oyster::request()'s try catch blocks cached instead of re-creating them every request
* ensure navigation api is up to par
* possibly refactor admin navigation api (spec complete, needs implementation)
* give oyster.pm some exported functions: (changed -- these functions both exist but will not be made exports)
	execute_script
	perl_require (aka, require a file without oyster's lib paths)
* possibly revert to having libraries not 'use oyster' -- it can create circular dependency issues if you attempt to just use a library without first using oyster.
* move navigation stuff to oyster.pm -- should be part of the core
* remove general _admin permissions -- all they do is control whether you can access menus or not -- and just check the individual permissions
    > this will be a performance hit but the current way is just too ugly
* rename user_admin_find permission (and possibly the associated function and url)
* remove the 'library' oyster import set
* menu lib should print nothing if the menu contains nothing, should return true/false for if anything was printed or not
* make exception throwing more consistent
	* remove any remaining 'error' exceptions
	* always use quotes for the error name
* update sims.js to oyster
* add function to module.pm, get latest revision
* move misc::trace to exceptions.pm
* consider dividing misc.pm up into many packages, like string::random(), etc
* load modules based on their dependencies (steal algorithm from update.pl)
	+ skip modules that are not up to date (this requires a investigation, it can have a lot of side effects)
	* die if a module needs to be updated
* email.pm has a few functions that need their argument lists updated
* Remove any remaining 'deprecated' stuff and fix anything that depends on it
	+ there are still a few things in xml::parser, but that is more of an auxiliary module
* server last conf should go in tmp (/script/ shouldn't be assumed writable)
* Clean up testing framework
* move bbcode/xhtml tags to just be hard coded -- this saves memory and speeds load time
* figure out if @INC should include module directories
* menu lib currently ignores 'require_children' for anything but top level items -- leave this as a limitation?
	* updated menu lib to obey 'require_children' for all items
* console search is broken, investigate this (seems to be ok now)
* convert /swaf/ to /oyster/ in all xml/xslt

Finished but need testing

* new ipc library
* Finish the algorithm for update.pl (if swaf is installed, only update installed modules)
* make sure STDERR is being used when it should be

TODO

- docs:
	* coding conventions
	* sql compatability
	- xml/xslt conventions
	+ xslt browser gotchas
	+ how to use strict in your module
	- testing framework
	+ ajax
	- module creation walkthrough
& Spec out the new admin module and begin writing it
- look over libraries (again) to ensure consistent naming conventions
- various utils should use console::util to parse args instead of just using @ARGV
- better logic for getting content-type
- recompile server_base.xsl dynamically as needed
- certain libs (paypal, xml::parser, image, etc) should probably be removed until beta or later alpha
- revisions should probably just return their @revision arrays, like meta.pl/permissions.pl

